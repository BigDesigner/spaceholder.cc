name: CI

on: [push, pull_request, workflow_dispatch]

jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: github/codeql-action/init@v2
        with:
          languages: ruby
      - uses: github/codeql-action/autobuild@v2
      - uses: github/codeql-action/analyze@v2
  audit:
    name: Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true
      - run: bundle exec bundle-audit check --update
  build:
    name: Build
    permissions:
      contents: read
      id-token: write
      packages: write
    needs: [audit, lint, test]
    if: github.ref_name == 'production'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: docker/setup-buildx-action@v1
      - uses: google-github-actions/auth@v0
        id: gcloud-auth
        with:
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}
          token_format: access_token
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
      - name: Authenticate to Google Container Registry
        uses: docker/login-action@v1
        with:
          registry: gcr.io
          username: oauth2accesstoken
          password: ${{ steps.gcloud-auth.outputs.access_token }}
      - name: Authenticate to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Generate short SHA
        id: vars
        run: echo "::set-output name=short_sha::$(git rev-parse --short HEAD)"
      - name: Build and push container images
        uses: docker/build-push-action@v2
        with:
          cache-from: type=gha
          cache-to: type=gha,mode=max
          push: true
          tags: |
            gcr.io/${{ env.GCP_PROJECT }}/${{ github.repository }}:${{ steps.vars.outputs.short_sha }}
            gcr.io/${{ env.GCP_PROJECT }}/${{ github.repository }}:latest
            ghcr.io/${{ github.repository }}:${{ steps.vars.outputs.short_sha }}
            ghcr.io/${{ github.repository }}:latest
          target: production
  deploy:
    name: Deploy
    permissions:
      contents: read
      id-token: write
    needs: build
    if: github.ref_name == 'production'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: google-github-actions/auth@v0
        with:
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
      - uses: google-github-actions/deploy-cloudrun@v0
        with:
          image: gcr.io/${{ env.GCP_PROJECT }}/${{ github.repository }}
          service: spaceholder-cc-web
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true
      - run: bundle exec rubocop --format progress --format CodeScanning::SarifFormatter --out rubocop.sarif
      - uses: github/codeql-action/upload-sarif@v1
        if: ${{ always() }}
        with:
          sarif_file: rubocop.sarif
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true
      - name: Install dependencies
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |-
          sudo apt update
          sudo apt install libvips
      - name: Run RSpec
        run: bundle exec rspec --format RSpec::Github::Formatter
      - uses: paambaati/codeclimate-action@v3.0.0
        env:
          CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}
